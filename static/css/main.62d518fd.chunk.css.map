{"version":3,"sources":["../../css/_animations.scss","../../css/_grid.scss","../../../node_modules/sass-mq/_mq.scss","text.module.scss","../../css/_typography.scss","../../css/_colors.scss","landing.module.scss","css/_animations.scss","css/_grid.scss","../node_modules/sass-mq/_mq.scss","css/utils.scss"],"names":[],"mappings":"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","file":"main.62d518fd.chunk.css","sourcesContent":["$animation-time-default: 0.3s;\n$animation-type-easyinout: ease-in-out;\n\n@keyframes fadeOut {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n",".grid-area {\n  display: grid;\n  width: 100vw;\n  box-sizing: border-box;\n  grid-template-columns: auto 1fr auto;\n  @include mq($from: lg_desktop) {\n    grid-template-columns: minmax(1px, auto) $grid-max-width minmax(1px, auto);\n  }\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n}\n\n.grid-content {\n  display: grid;\n  grid-column: 2 / span 1;\n  grid-template-columns: repeat(14, 1fr);\n  @include mq($from: lg_desktop) {\n    grid-template-columns: repeat(12, 1fr);\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import 'css/utils.scss';\n\n.body-tiny {\n  font-size: $font-size-desktop-tiny-body;\n  font-weight: $font-weight-normal;\n  font-family: $font-family;\n  line-height: $p4-line-height;\n  color: $black;\n}\n\n.body-small {\n  font-size: $font-size-mobile-small-body;\n  font-weight: $font-weight-normal;\n  font-family: $font-family;\n  line-height: $p3-line-height;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-small-body;\n  }\n}\n\n.body-regular {\n  font-size: $font-size-mobile-regular-body;\n  font-weight: $font-weight-normal;\n  font-family: $font-family;\n  line-height: $p2-line-height;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-regular-body;\n  }\n}\n\n.body-large {\n  font-size: $font-size-mobile-large-body;\n  font-weight: $font-weight-normal;\n  font-family: $font-family;\n  line-height: $p1-line-height;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-large-body;\n  }\n}\n\n.heading-0 {\n  font-size: $font-size-mobile-h0;\n  font-weight: $font-weight-black;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-h0;\n  }\n}\n\n.heading-1 {\n  font-size: $font-size-mobile-h1;\n  font-weight: $font-weight-black;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-h1;\n  }\n}\n\n.heading-2 {\n  font-size: $font-size-mobile-h2;\n  font-weight: $font-weight-extrabold;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-h2;\n  }\n\n  &.highlight::after {\n    height: 21px;\n  }\n}\n\n.heading-3 {\n  font-size: $font-size-mobile-h3;\n  font-weight: $font-weight-bold;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-h3;\n  }\n\n  &.highlight::after {\n    height: 18px;\n  }\n}\n\n.heading-4 {\n  font-size: $font-size-mobile-h4;\n  font-weight: $font-weight-bold;\n  font-family: $font-family;\n  line-height: normal;\n\n  @include mq($from: tablet) {\n    font-size: $font-size-desktop-h4;\n  }\n}\n\n.heading-5 {\n  font-size: $font-size-desktop-h5;\n  font-weight: $font-weight-bold;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n}\n\n.heading-6 {\n  font-size: $font-size-desktop-h6;\n  font-weight: $font-weight-bold;\n  font-family: $font-family;\n  line-height: normal;\n  width: fit-content;\n}\n\n.white {\n  color: $white;\n}\n\n.black {\n  color: $black;\n}\n\n.grey {\n  color: $grey;\n}\n\n.blue {\n  color: $blue;\n}\n\n.red { color: $red; }\n\n.dark-blue {\n  color: $dark-blue;\n}\n\n.darkest-grey {\n  color: $darkest-grey;\n}\n\n.another-grey {\n  color: $another-grey;\n}\n\n.weight {\n  &-hairline {\n    font-weight: 100;\n  }\n  &-extralight {\n    font-weight: 200;\n  }\n  &-light {\n    font-weight: 300;\n  }\n  &-normal {\n    font-weight: 400;\n  }\n  &-medium {\n    font-weight: 500;\n  }\n  &-semibold {\n    font-weight: 600;\n  }\n  &-bold {\n    font-weight: 700;\n  }\n  &-extrabold {\n    font-weight: 800;\n  }\n  &-black {\n    font-weight: 900;\n  }\n}\n\n.align {\n  &-left {\n    text-align: left;\n  }\n  &-center {\n    text-align: center;\n  }\n  &-right {\n    text-align: right;\n  }\n}\n\n.font {\n  &-lato {\n    font-family: $font-family;\n  }\n  &-ballpen {\n    font-family: 'Ball-Pen-Regular'\n  }\n}\n\n.highlight {\n  transform-style: preserve-3d;\n  display: inline;\n  position: relative;\n  &::after {\n    border-radius: 5px;\n    content: \"\";\n    position: absolute;\n    left: 0;\n    transform: translate3d(-2.5%, 0, -1px);\n    bottom: -3px;\n    z-index: -1;\n    width: 105%;\n    height: 24px;\n    // background-color: #feca33;\n  }\n}\n","// sizes-mobile\n$font-size-mobile-h0: 38px;\n$font-size-mobile-h1: 32px;\n$font-size-mobile-h2: 28px;\n$font-size-mobile-h3: 24px;\n$font-size-mobile-h4: 18px;\n$font-size-mobile-large-body: 16px;\n$font-size-mobile-regular-body: 14px;\n$font-size-mobile-small-body: 12px;\n\n// sizes-desktop\n$font-size-desktop-h0: 42px;\n$font-size-desktop-h1: 42px;\n$font-size-desktop-h2: 32px;\n$font-size-desktop-h3: 28px;\n$font-size-desktop-h4: 24px;\n$font-size-desktop-h5: 22px;\n$font-size-desktop-h6: 18px;\n$font-size-desktop-large-body: 18px;\n$font-size-desktop-regular-body: 16px;\n$font-size-desktop-small-body: 14px;\n$font-size-desktop-tiny-body: 12px;\n\n// weights\n$font-weight-black: 900;\n$font-weight-extrabold: 800;\n$font-weight-bold: 700;\n$font-weight-semibold: 600;\n$font-weight-medium: 500;\n$font-weight-normal: 400;\n$font-weight-light: 300;\n$font-weight-thin: 200;\n$font-weight-extrathin: 100;\n\n// families\n$font-family: 'Courier', 'Times New Roman', sans-serif;\n\n// line height\n$p1-line-height: 26px;\n$p2-line-height: 22px;\n$p3-line-height: 17px;\n$p4-line-height: 16px;\n","// platform colors\n$black: #000000;\n$white: #FFFFFF;\n$ivory: #F6F4F2;\n$lightest-grey: #F2F2F2;\n$extra-light-grey: #F9F9F9;\n$light-grey: #E7E5DD;\n$light-medium-grey: #D8D8D8;\n$medium-grey: #D8D6D0;\n$general-grey: #CCCCCC;\n$grey: #9F9F9F;\n$dark-grey: #B5B4AE;\n$another-grey: #ABABAB;\n$red: #FF4343;\n$dark-red: #E53E3E;\n$lightest-grey-blue: #E6EDF6;\n$light-grey-blue: #EBEDF0;\n$inputGrey: #DDDDDD;\n$generalGrey: #CCCCCC;\n$medium-grey-blue: #D3D5D8;\n$blue: #5486BF;\n$blue2: #7B92AB;\n$blue3: #EBEDF0;\n$super-dark-blue: #1F2532;\n$medium-grey-blue: #D3D5D8;\n$desaturated-dark-blue: #5D6D93;\n$desaturated-blue: #6793c6;\n$darkest-grey: #686B77;\n$dark-blue: #1F2532;\n","@import \"css/utils.scss\";\n\n.landing {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .turn-up {\n      z-index: 999;\n    }\n  }\n\n  .napolean {\n    width: 200px;\n    height: 200px;\n    position: absolute;\n  }\n}\n","$animation-time-default: 0.3s;\n$animation-type-easyinout: ease-in-out;\n\n@keyframes fadeOut {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n",".grid-area {\n  display: grid;\n  width: 100vw;\n  box-sizing: border-box;\n  grid-template-columns: auto 1fr auto;\n  @include mq($from: lg_desktop) {\n    grid-template-columns: minmax(1px, auto) $grid-max-width minmax(1px, auto);\n  }\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n}\n\n.grid-content {\n  display: grid;\n  grid-column: 2 / span 1;\n  grid-template-columns: repeat(14, 1fr);\n  @include mq($from: lg_desktop) {\n    grid-template-columns: repeat(12, 1fr);\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import \"media-queries\";\n@import \"colors\";\n@import \"typography\";\n@import \"dimensions\";\n@import \"animations\";\n@import \"grid\";\n$boxShadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n$boxShadowLight: 0px 1px 4px rgba(0, 0, 0, 0.1);\n\nbody {\n  margin: 0;\n}\n"]}